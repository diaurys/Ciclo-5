
Una bicola es una estructura de datos lineal en la que la inserción y borrado se pueden hacer tanto por el extremo frente como por el extremo final. Suponer que se ha elegido una representación dinámica, con punteros, y que los extremos de la lista se denominan frente y final. Escribir la implementación de las operaciones: insertarFrente(), insertarFinal(), eliminarFrente(), y eliminarFinal().

typedef struct Nodo {
  int dato;
  struct Nodo* siguiente;
} Nodo;

typedef struct Bicola {
  Nodo* frente;
  Nodo* final;
} Bicola;

void inicializarBicola(Bicola* bicola) {
  bicola->frente = NULL;
  bicola->final = NULL;
}

int estaVacia(Bicola* bicola) {
  return bicola->frente == NULL;
}

void insertarFrente(Bicola* bicola, int dato) {
  Nodo* nuevoNodo = (Nodo*)malloc(sizeof(Nodo));
  nuevoNodo->dato = dato;
  nuevoNodo->siguiente = NULL;

  if (estaVacia(bicola)) {
    bicola->frente = nuevoNodo;
    bicola->final = nuevoNodo;
  } else {
    nuevoNodo->siguiente = bicola->frente;
    bicola->frente = nuevoNodo;
  }
}

void insertarFinal(Bicola* bicola, int dato) {
  Nodo* nuevoNodo = (Nodo*)malloc(sizeof(Nodo));
  nuevoNodo->dato = dato;
  nuevoNodo->siguiente = NULL;

  if (estaVacia(bicola)) {
    bicola->frente = nuevoNodo;
    bicola->final = nuevoNodo;
  } else {
    bicola->final->siguiente = nuevoNodo;
    bicola->final = nuevoNodo;
  }
}

int eliminarFrente(Bicola* bicola) {
  if (estaVacia(bicola)) {
    printf("La bicola está vacía.\n");
    return -1; // Valor sentinela para indicar un error
  }

  Nodo* nodoEliminar = bicola->frente;
  int dato = nodoEliminar->dato;

  bicola->frente = bicola->frente->siguiente;
  free(nodoEliminar);

  if (bicola->frente == NULL) {
    bicola->final = NULL; // La bicola quedó vacía
  }

  return dato;
}

int eliminarFinal(Bicola* bicola) {
  if (estaVacia(bicola)) {
    printf("La bicola está vacía.\n");
    return -1; // Valor sentinela para indicar un error
  }

  if (bicola->frente == bicola->final) {
    return eliminarFrente(bicola); // Solo hay un elemento en la bicola
  }

  Nodo* nodoActual = bicola->frente;
  Nodo* nodoAnterior = NULL;

  while (nodoActual->siguiente != bicola->final) {
    nodoAnterior = nodoActual;
    nodoActual = nodoActual->siguiente;
  }

  int dato = bicola->final->dato;
  free(bicola->final);
  bicola->final = nodoAnterior;
  bicola->final->siguiente = NULL;

  return dato;
}

